[tool.poetry]
authors = ["Scott Ginn <ShoGinn>"]
description = "Check X for new tweets and send them to a webhook."
license = "MIT"
name = "x2webhook"
readme = "README.md"
version = "0.0.7"

[tool.poetry.dependencies]
loguru = "0.7.2"
pydantic = "2.7.2"
pydantic-settings = "2.2.1"
pymongo = { extras = ["srv"], version = "4.7.2" }
python = "^3.11, <3.13"
requests = "2.32.3"
twikit = "1.6.4"

[tool.poetry.group.dev.dependencies]
mypy = "1.10.0"
pip-audit = "2.7.3"
poethepoet = "0.26.1"
pre-commit = "3.7.1"
pytest = "8.2.1"
pytest-cov = "5.0.0"
pytest-mock = "3.14.0"
pytest-xdist = "3.6.1"
python-semantic-release = "9.8.0"
responses = "0.25.0"
ruff = "0.4.6"
types-requests = "2.32.0.20240523"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry.scripts]
x2webhook = "x2webhook.__main__:main"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
files = ["src", "tests"]
ignore_missing_imports = false
implicit_reexport = false
no_implicit_optional = true
python_version = "3.10"
show_error_codes = true
strict = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff]
line-length = 120
# Exclude a variety of commonly ignored directories.
exclude = [
    ".direnv",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "docs/sphinx",
    "node_modules",
    "venv",
]
# Assume Python 3.10.
target-version = "py310"

[tool.ruff.lint]
select = [
    # all possible codes as of this ruff version are listed here,
    # ones we don't want/need are commented out to make it clear
    # which have been omitted on purpose vs which ones get added
    # in new ruff releases and should be considered for enabling
    "ANN", # flake8-annotations
    "C90", # mccabe
    "E",
    "F", # pyflakes
    "I", # isort
    "N", # PEP8 naming
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
    # "S",    # flake8-bandit
    # "BLE",  # flake8-blind-except
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "FBT", # flake8-boolean-trap
    # "COM",  # flake8-commas
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    # "DJ",   # flake8-django
    # "EM",   # flake8-errmsg
    # "EXE",  # flake8-executable
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    # "G",    # flake8-logging-format
    # "INP",  # flake8-no-pep420
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate
    "PIE", # flake8-pie
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    # "PD",   # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # pylint
    # "TRY",  # tryceratops
    # "NPY",  # NumPy-specific rules
    "RUF", # Ruff-specific rules
]

ignore = [
    "ANN101", # no type for self
    "ANN102", # no type for cls
    "RET505", # allow else after return
    "SIM108", # allow if-else in place of ternary
    # To avoid conflict with ruff formatter. More details on https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "E111", # indentation is not a multiple of four
    "E117", # over-indented
    "ISC001", # single line implicit string concatenation
    "ISC002", # multi line implicit string concatenation
    "Q000", # bad quotes inline string
    "Q001", # bad quotes multiline string
    "Q002", # bad quotes docstring
    "Q003", # avoidable escaped quotes
    "W191", # indentation contains tabs
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/**/test_*.py" = ["PLR0913"] # too many args

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true

[tool.pytest.ini_options]
addopts = """\
    --strict-markers
"""
python_files = "test_*.py"
testpaths = ["tests"]

[tool.coverage.run]
omit = ["*/__init__.py", "tests/*"]
source = ["src"]

[tool.coverage.report]
exclude_also = [
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    "def __repr__",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
]
fail_under = 90
show_missing = true

[tool.semantic_release]
allow_zero_version = true
assets = []
build_command = "poetry build --format wheel"
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"
version_toml = ["pyproject.toml:tool.poetry.version"]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false
prerelease_token = "rc"

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []
template_dir = "templates"

[tool.semantic_release.changelog.environment]
autoescape = true
block_end_string = "%}"
block_start_string = "{%"
comment_end_string = "#}"
comment_start_string = "{#"
extensions = []
keep_trailing_newline = false
lstrip_blocks = false
newline_sequence = "\n"
trim_blocks = false
variable_end_string = "}}"
variable_start_string = "{{"

[tool.semantic_release.commit_author]
default = "semantic-release <semantic-release>"
env = "GIT_COMMIT_AUTHOR"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "refactor",
    "style",
    "test",
]
default_bump_level = 0
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
ignore_token_for_push = false
insecure = false
name = "origin"
type = "github"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.poe.tasks.lint]
cmd = "pre-commit run --all-files"
help = "Check all files"

[tool.poe.tasks._pytest]
cmd = "pytest"
help = "Run unit tests with pytest"

[tool.poe.tasks.test]
help = "Run all tests"
sequence = ["_pytest", "lint"]

[tool.poe.tasks.quicktest]
help = "Run all tests without linting"
sequence = ["_pytest"]

[tool.poe.tasks._coverage]
cmd = "pytest --cov --cov-report term --cov-report xml:.pytest_coverage.xml --junitxml=.pytest_results.xml"

[tool.poe.tasks.coverage]
help = "Run all tests with coverage"
sequence = ["_coverage", "lint"]

[tool.poe.tasks.quickcoverage]
help = "Run all tests with coverage without linting"
sequence = ["_coverage"]

[tool.poe.tasks.htmlcov]
cmd = "pytest --cov --cov-report html"
help = "Run all tests with coverage without linting"
